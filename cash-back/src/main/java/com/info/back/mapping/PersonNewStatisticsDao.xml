<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.info.back.dao.IPersonNewStatisticsDao">
    <sql id="wherePersonColumn">
        <where>
            <if test="createDate != null and createDate != ''">
                DATE_FORMAT(ps.createDate,"%Y-%m-%d") = #{createDate}
            </if>
            <if test="backUserName != null and backUserName != ''">
                AND ps.backUserName = #{backUserName}
            </if>
            <if test="companyId != null and companyId != ''">
                AND ps.companyId = #{companyId}
            </if>
            <if test="groupLevel != null and groupLevel != ''">
                AND ps.groupLevel = #{groupLevel}
            </if>
            <if test="companyIds != null and companyId == null">
                AND ps.companyId IN
                <foreach collection="companyIds" open="(" close=")" item="companyId" separator=",">
                    #{companyId}
                </foreach>
            </if>
            <if test="merchantNo != null and merchantNo != ''">
                AND ps.merchantNo = #{merchantNo}
            </if>
        </where>
    </sql>

    <select id="personNewAll" resultType="com.info.web.pojo.PersonNewStatistics" parameterType="hashmap">
        SELECT
        createDate,
        backUserId,
        companyId,
        backUserName,
        groupLevel,
        IFNULL(sum(totalPrincipal),0) AS 'totalPrincipal',
        IFNULL(sum(totalOrderCount),0) AS 'totalOrderCount',
        IFNULL(sum(todayDoneCount),0) AS 'todayDoneCount',
        IFNULL(sum(todayDoneMoney),0) AS 'todayDoneMoney',
        IFNULL(sum(doneOrderCount),0) AS 'doneOrderCount',
        IFNULL(sum(donePrincipal),0) AS 'donePrincipal',
        IFNULL(sum(donePenalty),0) AS 'donePenalty',
        IFNULL(sum(realgetPenalty),0) AS 'realgetPenalty',
        IFNULL(sum(noCheckPenalty),0) AS 'noCheckPenalty',

        IFNULL(ROUND(IFNULL(sum(donePrincipal),0)/IFNULL(sum(totalPrincipal),0)*100,2),0)AS 'cleanPrincipalProbability',
        IFNULL(ROUND(IFNULL(sum(realgetPenalty)+sum(noCheckPenalty),0)/IFNULL(sum(donePenalty),0)*100,2),0)AS 'cleanPenaltyProbability'
        FROM  person_statistics_new ps
        <include refid="wherePersonColumn"/>
        GROUP BY ps.backUserId
        <if test="orderBy != null and orderBy != ''">
            ORDER by ${orderBy}
        </if>
    </select>

    <select id="personNewAllCount" resultType="integer" parameterType="hashmap">
        SELECT COUNT(DISTINCT(ps.backUserId))
        FROM person_statistics_new ps
        <include refid="wherePersonColumn"/>
    </select>


    <select id="companyNewAll" resultType="com.info.web.pojo.PersonNewStatistics" parameterType="hashmap">
        SELECT
        createDate,
        cc.title AS companyName,
        companyId,
        groupLevel,
        IFNULL(sum(totalPrincipal),0) AS 'totalPrincipal',
        IFNULL(sum(totalOrderCount),0) AS 'totalOrderCount',
        IFNULL(sum(todayDoneCount),0) AS 'todayDoneCount',
        IFNULL(sum(todayDoneMoney),0) AS 'todayDoneMoney',
        IFNULL(sum(doneOrderCount),0) AS 'doneOrderCount',
        IFNULL(sum(donePrincipal),0) AS 'donePrincipal',
        IFNULL(sum(donePenalty),0) AS 'donePenalty',
        IFNULL(sum(realgetPenalty),0) AS 'realgetPenalty',
        IFNULL(sum(noCheckPenalty),0) AS 'noCheckPenalty',

        IFNULL(ROUND(IFNULL(sum(donePrincipal),0)/IFNULL(sum(totalPrincipal),0)*100,2),0)AS 'cleanPrincipalProbability',
        IFNULL(ROUND(IFNULL(sum(realgetPenalty)+sum(noCheckPenalty),0)/IFNULL(sum(donePenalty),0)*100,2),0)AS 'cleanPenaltyProbability'

        FROM person_statistics_new ps
        LEFT JOIN mman_loan_collection_company cc ON ps.companyId = cc.id
        <include refid="wherePersonColumn"/>
        GROUP BY ps.companyId ,ps.groupLevel
        <if test="orderBy != null and orderBy != ''">
            ORDER by ${orderBy}
        </if>
    </select>

    <select id="companyNewAllCount" resultType="integer" parameterType="hashmap">

        SELECT COUNT(1) FROM
        (
        SELECT COUNT(1)
        FROM person_statistics_new ps
        <include refid="wherePersonColumn"/>
        GROUP BY  ps.groupLevel
        ) c
    </select>

    <delete id="delNewPersonStatistics" parameterType="hashmap">
        DELETE ps FROM person_statistics_new ps
        WHERE <![CDATA[ ps.createDate >= #{beginTime} ]]>
        <![CDATA[ AND ps.createDate <= #{endTime}  ]]>
    </delete>

    <select id="getPersonNewStatistics" resultType="com.info.web.pojo.PersonNewStatistics" parameterType="hashmap">
       <![CDATA[
            select
                t1.dt as createDate , -- 统计日期
                t1.gl as groupLevel, -- 催收组编号
                t1.cmid as  companyId, -- 催收公司代号
                t1.cmn as companyName, -- 催收公司名称
                t1.cpid as backUserId, -- 催收员id
                t1.cpn as backUserName, -- 催收员姓名

                sum(t1.rcbj) as totalPrincipal, -- 入催本金
                sum(t1.rcds) as totalOrderCount, -- 入催单数

                sum(t1.drwcds) as todayDoneCount, -- 当日完成单数
                sum(t1.drwcbj) as todayDoneMoney, -- 当日完成本金
                sum(t1.wcds) as doneOrderCount, -- 完成单数
                sum(t1.wcbj) as donePrincipal, -- 完成本金
                sum(t1.wcznj) as donePenalty, -- 完成订单的滞纳金

                sum(t1.ssznj) as realgetPenalty , -- 实收滞纳金
                sum(t1.bjrkhznj) as noCheckPenalty -- 不考核滞纳金

            from

                (
                -- 入催本金、入催单数
                select
                    date(curdate()) dt, -- 统计日期
                    usr.group_level gl, -- 催收组编号
                    cmp.id cmid, -- 催收公司代号
                    cmp.title cmn, -- 催收公司名称
                    ch.current_collection_user_id uuid, -- 催收员uuid
                    usr.id cpid, -- 催收员id
                    usr.user_name cpn, -- 催收员姓名
                    if(ul.paid_money > 0, sum(ul.loan_money + ul.service_charge), sum(ul.loan_money)) rcbj, -- 入催本金
                    count(ch.id) rcds, -- 入催单数
                    0 drwcds,
                    0 drwcbj,
                    0 wcds,
                    0 wcbj,
                    0 wcznj,
                    0 ssznj,
                    0 bjrkhznj
                from mman_user_loan ul
                left join mman_loan_collection_order lo on ul.id = lo.loan_id
                left join mman_loan_collection_status_change_log ch on ch.loan_collection_order_id = lo.order_id
                left join back_user usr on ch.current_collection_user_id = usr.uuid
                left join mman_loan_collection_company cmp on usr.company_id = cmp.id
                where 1=1
                    and usr.status = 1
                    and usr.role_id = '10021'
                    and ul.borrowing_type = 2
                    and ch.after_status != 4
                    and ch.create_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and ch.create_date < date_add(curdate()-day(curdate())+1,interval 1 month )
                group by gl,cmid,cpid

                union all

                -- 当日完成单数、当日完成本金
                select
                    date(curdate()) dt, -- 统计日期
                    usr.group_level gl, -- 催收组编号
                    cmp.id cmid, -- 催收公司代号
                    cmp.title cmn, -- 催收公司名称
                    ch.current_collection_user_id uuid, -- 催收员uuid
                    usr.id cpid, -- 催收员id
                    usr.user_name cpn, -- 催收员姓名
                    0 rcbj,
                    0 rcds,
                    count(distinct lo.id) drwcds, -- 当日完成单数
                    sum(d.real_money) drwcbj, -- 当日完成本金
                    0 wcds,
                    0 wcbj,
                    0 wcznj,
                    0 ssznj,
                    0 bjrkhznj
                from mman_user_loan ul
                left join mman_loan_collection_order lo on ul.id = lo.loan_id
                left join mman_loan_collection_status_change_log ch on ch.loan_collection_order_id = lo.order_id
                left join back_user usr on ch.current_collection_user_id = usr.uuid
                left join mman_loan_collection_company cmp on usr.company_id = cmp.id
                left join credit_loan_pay p on p.loan_id = lo.loan_id
                left join credit_loan_pay_detail d on d.pay_id = lo.pay_id
                where 1=1
                    and usr.status = 1
                    and usr.role_id = '10021'
                    and ul.borrowing_type = 2
                    and ch.after_status = 4
                    and ch.create_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and ch.create_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                    and lo.status = 4
                    and p.update_date >= curdate()
                group by gl,cmid,cpid

                union all

                -- 完成单数、完成本金、完成订单的滞纳金
                select
                    date(curdate()) dt, -- 统计日期
                    usr.group_level gl, -- 催收组编号
                    cmp.id cmid, -- 催收公司代号
                    cmp.title cmn, -- 催收公司名称
                    ch.current_collection_user_id uuid, -- 催收员uuid
                    usr.id cpid, -- 催收员id
                    usr.user_name cpn, -- 催收员姓名
                    0 rcbj,
                    0 rcds,
                    0 drwcds,
                    0 drwcbj,
                    count(distinct lo.id) wcds, -- 完成单数
                    sum(d.real_money) wcbj, -- 完成本金
                    sum(d.real_penlty) wcznj,  -- 完成订单的滞纳金
                    0 ssznj,
                    0 bjrkhznj
                from mman_user_loan ul
                left join mman_loan_collection_order lo on ul.id = lo.loan_id
                left join credit_loan_pay p on p.loan_id = lo.loan_id
                left join credit_loan_pay_detail d on d.pay_id = lo.pay_id
                left join mman_loan_collection_status_change_log ch on ch.loan_collection_order_id = lo.order_id
                left join back_user usr on ch.current_collection_user_id = usr.uuid
                left join mman_loan_collection_company cmp on usr.company_id = cmp.id
                where 1=1
                    and usr.status = 1
                    and usr.role_id = '10021'
                    and ul.borrowing_type = 2
                    and ch.after_status = 4
                    and ch.create_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and ch.create_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                    and lo.status = 4
                    and p.update_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and p.update_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                group by gl,cmid,cpid

                union all

                -- 实收滞纳金
                SELECT
                    t1.dt, -- 统计日期
                    t1.gl, -- 催收组编号
                    t1.cmid, -- 催收公司代号
                    t1.cmn, -- 催收公司名称
                    t1.uuid, -- 催收员uuid
                    t1.cpid, -- 催收员id
                    t1.cpn, -- 催收员姓名
                    0 rcbj,
                    0 rcds,
                    0 drwcds,
                    0 drwcbj,
                    0 wcds,
                    0 wcbj,
                    0 wcznj,
                    sum(t1.a-t1.b) ssznj, -- 实收滞纳金
                    0 bjrkhznj

                from
                    (
                    select
                        date(curdate()) dt, -- 统计日期
                        usr.group_level gl, -- 催收组编号
                        cmp.id cmid, -- 催收公司代号
                        cmp.title cmn, -- 催收公司名称
                        ch.current_collection_user_id uuid, -- 催收员uuid
                        usr.id cpid, -- 催收员id
                        usr.user_name cpn, -- 催收员姓名
                        sum(d.real_penlty) a, -- 总收滞纳金
                        p.reduction_money b -- 减免滞纳金
                    from mman_user_loan ul
                    left join mman_loan_collection_order lo on ul.id = lo.loan_id
                    left join credit_loan_pay p on p.loan_id = lo.loan_id
                    left join credit_loan_pay_detail d on d.pay_id = lo.pay_id
                    left join mman_loan_collection_status_change_log ch on ch.loan_collection_order_id = lo.order_id
                    left join back_user usr on ch.current_collection_user_id = usr.uuid
                    left join mman_loan_collection_company cmp on usr.company_id = cmp.id
                    where 1=1
                        and usr.status = 1
                        and usr.role_id = '10021'
                        and ul.borrowing_type = 2
                        and ch.after_status = 4
                        and ch.create_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                        and ch.create_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                        and lo.status = 4
                        and p.update_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                        and p.update_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                        and p.remain_accrual IS NULL
                    group by lo.loan_id
                    ) t1
                group by t1.gl,t1.cmid,t1.cpid

                union all

                -- 不计入考核的滞纳金
                select
                    date(curdate()) dt, -- 统计日期
                    usr.group_level gl, -- 催收组编号
                    cmp.id cmid, -- 催收公司代号
                    cmp.title cmn, -- 催收公司名称
                    ch.current_collection_user_id uuid, -- 催收员uuid
                    usr.id cpid, -- 催收员id
                    usr.user_name cpn, -- 催收员姓名
                    0 rcbj,
                    0 rcds,
                    0 drwcds,
                    0 drwcbj,
                    0 wcds,
                    0 wcbj,
                    0 wcznj,
                    0 ssznj,
                    sum(c.reduction_money) bjrkhznj -- 不计入考核减免滞纳金
                from mman_user_loan ul
                left join mman_loan_collection_order lo on ul.id = lo.loan_id
                left join credit_loan_pay p on p.loan_id = lo.loan_id
                left join mman_loan_collection_status_change_log ch on ch.loan_collection_order_id = lo.order_id
                left join back_user usr on ch.current_collection_user_id = usr.uuid
                left join mman_loan_collection_company cmp on usr.company_id = cmp.id
                left join audit_center c ON lo.loan_id = c.loan_id
                where 1=1
                    and usr.status = 1
                    and usr.role_id = '10021'
                    and ul.borrowing_type = 2
                    and ch.after_status = 4
                    and ch.create_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and ch.create_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                    and lo.status = 4
                    and p.update_date >= DATE_ADD(curdate(),interval -day(curdate())+1 day)
                    and p.update_date < date_add(curdate()-day(curdate())+1,interval 1 month)
                    and c.status = 5
                    and c.type = 3
                group by gl,cmid,cpid
                ) t1

            group by t1.gl,t1.cmid,t1.cpid

        ]]>

    </select>

    <insert id="insertPersonNewStatistics" parameterType="com.info.web.pojo.PersonNewStatistics">
        INSERT INTO person_statistics_new(
        backUserId,
        companyId,
        groupLevel,
        backUserName,
        totalPrincipal,
        totalOrderCount,
        todayDoneCount,
        todayDoneMoney,
        doneOrderCount,
        donePrincipal,
        donePenalty,
        realgetPenalty,
        noCheckPenalty,
        createDate
        )VALUES (
        #{backUserId},
        #{companyId},
        #{groupLevel},
        #{backUserName},
         #{totalPrincipal},
        #{totalOrderCount},
        #{todayDoneCount},
         #{todayDoneMoney},
        #{doneOrderCount},
         #{donePrincipal},
        #{donePenalty},
        #{realgetPenalty},
        #{noCheckPenalty},
        #{createDate}
        )
    </insert>

</mapper>